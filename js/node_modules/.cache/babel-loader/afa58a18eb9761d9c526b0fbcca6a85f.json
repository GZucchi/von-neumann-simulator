{"ast":null,"code":"var _jsxFileName = \"/home/bernardo/Projects/von-neumann-simulator/src/components/App.js\";\nimport React, { useState } from 'react';\nimport appStyle from './style/App.style';\nimport Code from './Code';\nimport Terminal from './Terminal';\nimport Memory from './Memory';\n\nconst App = () => {\n  const executeInstruction = (CO, OP, CI, AC, MEM) => {\n    // CO: código de operação\n    // OP: operando\n    // CI: contador de instruções\n    // AC: acumulador\n    // MEM: memória\n    let HALT = false;\n\n    switch (OP) {\n      case 0x0:\n        // JP\n        CI = OP;\n        break;\n\n      case 0x1:\n        // JZ\n        AC === 0 ? CI = OP : CI += 2;\n        break;\n\n      case 0x2:\n        // JN\n        AC < 0 ? CI = OP : CI += 2;\n        break;\n\n      case 0x3:\n        // LV\n        AC = OP;\n        CI += 2;\n        break;\n\n      case 0x4:\n        // +\n        AC += MEM[OP];\n        CI += 2;\n        break;\n\n      case 0x5:\n        // -\n        AC -= MEM[OP];\n        CI += 2;\n        break;\n\n      case 0x6:\n        // *\n        AC *= MEM[OP];\n        CI += 2;\n        break;\n\n      case 0x7:\n        // /\n        AC /= MEM[OP];\n        CI += 2;\n        break;\n\n      case 0x8:\n        // LD\n        AC = MEM[OP];\n        CI += 2;\n        break;\n\n      case 0x9:\n        // MM\n        MEM[OP] = AC;\n        CI += 2;\n        break;\n\n      case 0xa:\n        // SC\n        MEM[OP] = CI >> 8;\n        MEM[OP + 1] = CI % 0x100;\n        CI = OP + 2;\n        break;\n\n      case 0xb:\n        // RS\n        CI = OP;\n        break;\n\n      case 0xc:\n        // HM\n        CI = OP;\n        HALT = true;\n        break;\n\n      case 0xd:\n        // GD\n        // TODO implementar\n        CI += 2;\n        break;\n\n      case 0xe:\n        // PD\n        // TODO implementar\n        CI += 2;\n        break;\n\n      case 0xf:\n        // OS\n        // TODO implementar\n        CI += 2;\n\n        switch (OP >> 8) {\n          case 0x1:\n            const valor = OP % 0x100;\n            console.log(valor.toString(16));\n            break;\n        }\n\n        break;\n\n      default:\n        console.error('Instrução desconhecida');\n    }\n\n    return {\n      CI,\n      AC,\n      MEM,\n      HALT\n    };\n  };\n\n  const [newCode, setNewCode] = useState('');\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"header\", {\n    style: appStyle.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    style: appStyle.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, \"Simulador de M\\xE1quina de Von Neumann\")), /*#__PURE__*/React.createElement(\"main\", {\n    style: appStyle.main,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Code, {\n    setNewCode: setNewCode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Terminal, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Memory, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/bernardo/Projects/von-neumann-simulator/src/components/App.js"],"names":["React","useState","appStyle","Code","Terminal","Memory","App","executeInstruction","CO","OP","CI","AC","MEM","HALT","valor","console","log","toString","error","newCode","setNewCode","header","title","main"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport appStyle from './style/App.style'\nimport Code from './Code'\nimport Terminal from './Terminal'\nimport Memory from './Memory'\n\nconst App = () => {\n    const executeInstruction = (CO, OP, CI, AC, MEM) => {\n    // CO: código de operação\n    // OP: operando\n    // CI: contador de instruções\n    // AC: acumulador\n    // MEM: memória\n    \n    let HALT = false\n\n    switch (OP) {\n      case 0x0:  // JP\n        CI = OP\n        break\n      case 0x1:  // JZ\n        AC === 0 ? CI = OP : CI += 2\n        break\n      case 0x2:  // JN\n        AC < 0 ? CI = OP : CI += 2\n        break\n      case 0x3:  // LV\n        AC = OP\n        CI += 2\n        break\n      case 0x4:  // +\n        AC += MEM[OP]\n        CI += 2\n        break\n      case 0x5:  // -\n        AC -= MEM[OP]\n        CI += 2\n        break\n      case 0x6:  // *\n        AC *= MEM[OP]\n        CI += 2\n        break\n      case 0x7:  // /\n        AC /= MEM[OP]\n        CI += 2\n        break\n      case 0x8:  // LD\n        AC = MEM[OP]\n        CI += 2\n        break\n      case 0x9:  // MM\n        MEM[OP] = AC\n        CI += 2\n        break\n      case 0xa:  // SC\n        MEM[OP] = CI >> 8\n        MEM[OP+1] = CI % 0x100\n        CI = OP + 2\n        break\n      case 0xb:  // RS\n        CI = OP\n        break\n      case 0xc:  // HM\n        CI = OP\n        HALT = true\n        break\n      case 0xd:  // GD\n        // TODO implementar\n        CI += 2\n        break\n      case 0xe:  // PD\n        // TODO implementar\n        CI += 2\n        break\n      case 0xf:  // OS\n        // TODO implementar\n        CI += 2\n        switch (OP >> 8) {\n          case 0x1:\n            const valor = OP % 0x100\n            console.log(valor.toString(16))\n            break\n        }\n        break\n      default:\n        console.error('Instrução desconhecida')\n    }\n\n    return({ CI, AC, MEM, HALT })\n  }\n\n  const [ newCode, setNewCode ] = useState('')\n\n  return (\n    <>\n      <header style={appStyle.header}>\n        <h1 style={appStyle.title}>Simulador de Máquina de Von Neumann</h1>\n      </header>\n      <main style={appStyle.main}>\n        <Code setNewCode={setNewCode}/>\n        <Terminal />\n        <Memory />\n      </main>\n    </>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}