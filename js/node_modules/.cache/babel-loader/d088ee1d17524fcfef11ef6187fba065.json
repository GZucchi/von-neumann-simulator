{"ast":null,"code":"var _jsxFileName = \"/home/bernardo/Projects/von-neumann-simulator/src/components/Memory.js\";\nimport React, { useState } from 'react';\n\nconst MemoryField = ({\n  address,\n  value,\n  state\n}) => {\n  const handleChange = event => {\n    let MEMcopy = [...state.MEM];\n    MEMcopy[address] = event.target.value === '' ? 0 : parseInt(event.target.value, 16);\n    state.setMEM(MEMcopy);\n    console.log(MEMcopy);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, address.toString(16).toUpperCase()), /*#__PURE__*/React.createElement(\"input\", {\n    value: value.toString(16).toUpperCase(),\n    onChange: handleChange,\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst RegisterField = ({\n  label,\n  value,\n  set\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, label), /*#__PURE__*/React.createElement(\"input\", {\n    value: value.toString(16).toUpperCase(),\n    onChange: event => set(event.target.value),\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst Memory = () => {\n  const memoryStyle = {\n    flex: 1,\n    textAlign: 'right',\n    padding: '0 1em'\n  };\n  const [MEM, setMEM] = useState(Array(4096).fill(0));\n  const [CI, setCI] = useState(0);\n  const [AC, setAC] = useState(0);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: memoryStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(RegisterField, {\n    label: \"CI\",\n    value: CI,\n    set: setCI,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(RegisterField, {\n    label: \"AC\",\n    value: AC,\n    set: setAC,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }), MEM.map((value, address) => /*#__PURE__*/React.createElement(MemoryField, {\n    key: address,\n    address: address,\n    value: value,\n    state: {\n      MEM,\n      setMEM\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 39\n    }\n  }))));\n};\n\nexport default Memory;","map":{"version":3,"sources":["/home/bernardo/Projects/von-neumann-simulator/src/components/Memory.js"],"names":["React","useState","MemoryField","address","value","state","handleChange","event","MEMcopy","MEM","target","parseInt","setMEM","console","log","toString","toUpperCase","RegisterField","label","set","Memory","memoryStyle","flex","textAlign","padding","Array","fill","CI","setCI","AC","setAC","map"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nconst MemoryField = ({ address, value, state }) => {\n  const handleChange = event => {\n    let MEMcopy = [ ...state.MEM ]\n    MEMcopy[address] = event.target.value === '' ? 0 : parseInt(event.target.value, 16)\n    state.setMEM(MEMcopy)\n    console.log(MEMcopy)\n  }\n\n  return(\n    <div>\n      <label>{address.toString(16).toUpperCase()}</label>\n      <input value={value.toString(16).toUpperCase()} onChange={handleChange} type=\"text\"/>\n    </div>\n  )\n}\n\nconst RegisterField = ({ label, value, set }) => {\n  return(\n    <div>\n      <label>{label}</label>\n      <input value={value.toString(16).toUpperCase()} onChange={event => set(event.target.value)} type=\"text\"/>\n    </div>\n  )\n}\n\nconst Memory = () => {\n  const memoryStyle = {\n    flex: 1, \n    textAlign: 'right',\n    padding: '0 1em',\n  }\n\n  const [ MEM, setMEM ] = useState(Array(4096).fill(0))\n  const [ CI, setCI ] = useState(0)\n  const [ AC, setAC ] = useState(0)\n\n  return(\n    <div style={memoryStyle}>\n      <form>\n        <RegisterField label=\"CI\" value={CI} set={setCI}/>\n        <RegisterField label=\"AC\" value={AC} set={setAC}/>\n        { MEM.map((value, address) => <MemoryField key={address} address={address} value={value} state={{ MEM, setMEM }}/>) }\n      </form>\n    </div>\n  )\n}\n\nexport default Memory\n"]},"metadata":{},"sourceType":"module"}